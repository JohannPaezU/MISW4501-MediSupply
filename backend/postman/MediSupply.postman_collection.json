{
	"info": {
		"_postman_id": "c345c3ea-6f4f-4028-83de-25a678d36dd3",
		"name": "MediSupply",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10852636"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('created_at');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"full_name\": \"Johann PÃ¡ez\",\r\n    \"nit\": \"12345678-9\",\r\n    \"address\": \"Calle 103 # 16A - 16\",\r\n    \"phone\": \"3003251390\",\r\n    \"role\": \"institutional\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('otp_expiration_minutes');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('access_token');\r",
									"    pm.expect(jsonData).to.have.property('token_type');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"otp_code\": \"255236\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/verify-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify-otp"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Json Response has correct structure\", function () {\r",
							"    const jsonData = pm.response.json();    \r",
							"    pm.expect(jsonData).to.have.property('status');\r",
							"    pm.expect(jsonData).to.have.property('success');\r",
							"    pm.expect(jsonData).to.have.property('time_stamp');\r",
							"    pm.expect(jsonData).to.have.property('service');    \r",
							"});\r",
							"\r",
							"pm.test(\"Headers has ip_address and hostname\", function () {\r",
							"    const headers = pm.response.headers;\r",
							"    const ipAddress = headers.get('ip_address');\r",
							"    const hostname = headers.get('hostname');\r",
							"\r",
							"    pm.expect(ipAddress, \"Header 'ip_address' should exist\").to.not.be.undefined;\r",
							"    pm.expect(hostname, \"Header 'hostname' should exist\").to.not.be.undefined;\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"System is healthy\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql('healthy');\r",
							"    pm.expect(jsonData.success).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	]
}