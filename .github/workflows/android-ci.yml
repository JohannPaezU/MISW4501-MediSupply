name: Android CI

on:
  push:
    branches: [main, develop]
    paths:
      - "mobile/**"
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect mobile changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.detect.outputs.CHANGED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: detect
        name: Detect changes in mobile
        run: |
          if [ -z "${{ github.base_ref }}" ]; then
            echo "🔍 No PR context, assuming mobile changes (manual or push)"
            echo "CHANGED=mobile/" >> $GITHUB_OUTPUT
          else
            echo "Fetching base branch..."
            git fetch origin ${{ github.base_ref }} --depth=1
            echo "Detecting changes in mobile..."
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '^mobile/' || true)
            DETECTED="mobile/"

            if [ -z "$CHANGED" ]; then
              echo "Result: ❌ No mobile changes detected"
              DETECTED=""
            else
              echo "Result: ✅ Mobile changes detected"
            fi
            echo "CHANGED=$DETECTED" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x mobile/gradlew

      - name: Build with Gradle
        run: cd mobile && ./gradlew build

      - name: Run unit tests
        run: cd mobile && ./gradlew test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: mobile/app/build/test-results/

  deploy-prod:
    name: Deploy to production (Generate Release APK)
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: >
      github.ref == 'refs/heads/main' &&
      needs.detect-changes.outputs.changed != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x mobile/gradlew

      - name: Generate Release APK
        run: |
          cd mobile
          echo "🔨 Building release APK..."
          ./gradlew assembleRelease
          echo "✅ Release APK generated successfully"

      - name: Get APK info
        run: |
          cd mobile
          APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
          if [ -f "$APK_PATH" ]; then
            echo "📱 APK Details:"
            echo "  - Path: $APK_PATH"
            echo "  - Size: $(du -h "$APK_PATH" | cut -f1)"
            echo "  - Version: $(grep 'versionName' app/build.gradle | cut -d'"' -f2)"
            echo "  - Version Code: $(grep 'versionCode' app/build.gradle | cut -d' ' -f2)"
          else
            echo "❌ APK not found at $APK_PATH"
            exit 1
          fi

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: mobile/app/build/outputs/apk/release/app-release-unsigned.apk
          retention-days: 30

      - name: Create Release Notes
        run: |
          echo "## 📱 MediSupply Android Release" > release_notes.md
          echo "" >> release_notes.md
          echo "**Version:** $(grep 'versionName' mobile/app/build.gradle | cut -d'"' -f2)" >> release_notes.md
          echo "**Version Code:** $(grep 'versionCode' mobile/app/build.gradle | cut -d' ' -f2)" >> release_notes.md
          echo "**Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "**Commit:** ${{ github.sha }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Changes in this release:" >> release_notes.md
          echo "- Mobile app changes detected and built" >> release_notes.md
          echo "- Release APK generated successfully" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Download:" >> release_notes.md
          echo "The APK artifact is available in the workflow artifacts." >> release_notes.md

      - name: Upload Release Notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 30

      - name: Notify Production Deploy
        run: |
          echo "🚀 Android Release Deploy Completed!"
          echo "📱 APK generated and uploaded as artifact"
          echo "📝 Release notes created"
          echo "🔗 Check the artifacts section for download"

  android-status:
    name: Android CI Status
    runs-on: ubuntu-latest
    needs: [detect-changes, build, deploy-prod]
    if: always()
    steps:
      - name: Final status summary
        run: |
          CHANGED="${{ needs.detect-changes.outputs.changed }}"
          BUILD_RESULT="${{ needs.build.result }}"
          DEPLOY_PROD_RESULT="${{ needs.deploy-prod.result }}"

          echo "📋 Summary:"
          echo "  - Build: $BUILD_RESULT"
          echo "  - Deploy to Production: $DEPLOY_PROD_RESULT"
          echo ""

          if [ -z "$CHANGED" ]; then
            echo "🔍 No mobile changes detected — nothing executed."
            exit 0
          fi

          if [ "$BUILD_RESULT" != "success" ] || \
             ([ "$DEPLOY_PROD_RESULT" != "success" ] && [ "$DEPLOY_PROD_RESULT" != "skipped" ]); then
            echo "❌ One or more Android CI jobs failed."
            exit 1
          fi

          echo "✅ All Android CI jobs passed successfully."
