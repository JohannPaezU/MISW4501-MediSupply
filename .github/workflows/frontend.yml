name: Frontend CI/CD (Firebase)

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "¬øForzar despliegue?"
        required: true
        type: choice
        options:
          - "No"
          - "S√≠"
        default: "S√≠"
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect frontend changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.detect.outputs.CHANGED }}
    steps:
      - uses: actions/checkout@v4

      - id: detect
        name: Detect changes in frontend
        run: |
          if [ -z "${{ github.base_ref }}" ]; then
            echo "üîç No PR context, assuming frontend changes (manual or push)"
            echo "CHANGED=frontend/" >> $GITHUB_OUTPUT
          else
            git fetch origin ${{ github.base_ref }} --depth=1
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '^frontend/' || true)
            DETECTED="frontend/"
            if [ -z "$CHANGED" ]; then
              echo "Result: No frontend changes detected"
              DETECTED=""
            else
              echo "Result: Frontend changes detected"
            fi
            echo "CHANGED=$DETECTED" >> $GITHUB_OUTPUT
          fi

  build-test:
    name: Lint, Test & Build Angular App
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed != ''
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run unit tests with coverage
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
        env:
          CI: true

      - name: Show coverage summary
        run: |
          echo "üìä Coverage Summary:"
          find ./frontend/coverage -name "lcov-report" -exec echo "Found coverage report in {}" \; || echo "No coverage report found."

      - name: Build Angular app
        run: npm run build --if-present

  deploy-staging:
    name: Deploy to Staging (Firebase)
    runs-on: ubuntu-latest
    needs: build-test
    if: >
      github.ref == 'refs/heads/develop' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'S√≠') ||
        (github.event_name == 'push' && needs.detect-changes.outputs.changed != '')
      )
    steps:
      - uses: actions/checkout@v4
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Deploy to Firebase Staging
        run: firebase deploy --project staging --token ${{ secrets.FIREBASE_TOKEN }} --only hosting

  deploy-prod:
    name: Deploy to Production (Firebase)
    runs-on: ubuntu-latest
    needs: [detect-changes, build-test]
    if: >
      github.ref == 'refs/heads/main' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'S√≠') ||
        (github.event_name == 'push' && needs.detect-changes.outputs.changed != '')
      )
    steps:
      - uses: actions/checkout@v4
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      - name: Deploy to Firebase Production
        run: firebase deploy --project default --token ${{ secrets.FIREBASE_TOKEN }} --only hosting

  status:
    name: Frontend CI/CD Status
    runs-on: ubuntu-latest
    needs: [detect-changes, build-test, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Summary
        run: |
          CHANGED="${{ needs.detect-changes.outputs.changed }}"
          BUILD_RESULT="${{ needs.build-test.result }}"
          DEPLOY_STAGING_RESULT="${{ needs.deploy-staging.result }}"
          DEPLOY_PROD_RESULT="${{ needs.deploy-prod.result }}"

          echo "üìã Summary:"
          echo "  - Build & Test: $BUILD_RESULT"
          echo "  - Deploy (staging): $DEPLOY_STAGING_RESULT"
          echo "  - Deploy (production): $DEPLOY_PROD_RESULT"

          if [ -z "$CHANGED" ]; then
            echo "üü° No frontend changes detected ‚Äî nothing executed."
            exit 0
          fi

          if [ "$BUILD_RESULT" != "success" ] || \
             ([ "$DEPLOY_STAGING_RESULT" != "success" ] && [ "$DEPLOY_STAGING_RESULT" != "skipped" ]) || \
             ([ "$DEPLOY_PROD_RESULT" != "success" ] && [ "$DEPLOY_PROD_RESULT" != "skipped" ]); then
            echo "‚ùå One or more jobs failed."
            exit 1
          fi

          echo "‚úÖ All frontend CI/CD jobs passed successfully."