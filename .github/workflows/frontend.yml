name: Frontend CI/CD (Firebase)

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "¿Forzar despliegue?"
        required: true
        type: choice
        options:
          - "No"
          - "Sí"
        default: "Sí"
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect frontend changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.detect.outputs.CHANGED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: detect
        name: Detect changes in frontend
        run: |
          if [ -z "${{ github.base_ref }}" ]; then
            echo "No PR context, assuming frontend changes (manual or push)"
            echo "CHANGED=frontend/" >> $GITHUB_OUTPUT
          else
            echo "Fetching base branch..."
            git fetch origin ${{ github.base_ref }} --depth=1
            echo "Detecting changes in frontend..."
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '^frontend/' || true)
            DETECTED="frontend/"

            if [ -z "$CHANGED" ]; then
              echo "Result: No frontend changes detected"
              DETECTED=""
            else
              echo "Result: Frontend changes detected"
            fi
            echo "CHANGED=$DETECTED" >> $GITHUB_OUTPUT
          fi

  build-test:
    name: Lint, Test & Build Angular App
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed != ''
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run unit tests with coverage (must reach 80%)
        env:
          CI: true
        run: |
          echo "Running unit tests with coverage..."
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

          echo "Checking coverage..."
          # Buscar automáticamente el archivo lcov.info dentro de coverage/
          COVERAGE_FILE=$(find coverage -type f -name "lcov.info" | head -n 1)

          if [ -z "$COVERAGE_FILE" ]; then
            echo "No coverage report found!"
            echo "Contents of coverage folder:"
            ls -R coverage || true
            exit 1
          fi

          echo "Coverage report found at: $COVERAGE_FILE"

          # Calcular cobertura a partir del lcov.info
          TOTAL=$(grep -A1 'end_of_record' -B999 "$COVERAGE_FILE" | grep 'LF:' | awk -F ':' '{s+=$2} END {print s}')
          HIT=$(grep -A1 'end_of_record' -B999 "$COVERAGE_FILE" | grep 'LH:' | awk -F ':' '{s+=$2} END {print s}')

          if [ "$TOTAL" -eq 0 ]; then
            echo "No lines found in coverage data"
            exit 1
          fi

          PERCENT=$(( 100 * HIT / TOTAL ))

          echo "Total lines: $TOTAL"
          echo "Covered lines: $HIT"
          echo "Coverage: ${PERCENT}%"

          if [ "$PERCENT" -lt 80 ]; then
            echo "Coverage below 80% (${PERCENT}%)"
            exit 1
          else
            echo "Coverage OK (${PERCENT}%)"
          fi
      - name: Build Angular app
        run: npm run build --if-present

  deploy-staging:
    name: Deploy to Firebase (Staging)
    runs-on: ubuntu-latest
    needs: build-test
    if: >
      github.ref == 'refs/heads/develop' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'Sí') ||
        (github.event_name == 'push' && needs.detect-changes.outputs.changed != '')
      )
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Staging
        run: firebase deploy --project ${{ vars.FIREBASE_PROJECT_STAGING }} --token ${{ secrets.FIREBASE_TOKEN }} --only hosting

      - name: Health check
        run: |
          echo "Waiting for Firebase to update..."
          sleep 15
          if [ -z "${{ vars.FIREBASE_STAGING_URL }}" ]; then
            echo "No health check URL configured (vars.FIREBASE_STAGING_URL)"
          else
            echo "Checking staging site: ${{ vars.FIREBASE_STAGING_URL }}"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.FIREBASE_STAGING_URL }})
            if [ "$STATUS" != "200" ]; then
              echo "Firebase site not healthy (status: $STATUS)"
              exit 1
            fi
            echo "Firebase site is live and healthy (status: $STATUS)"
          fi

  frontend-status:
    name: Frontend CI/CD Status
    runs-on: ubuntu-latest
    needs: [detect-changes, build-test, deploy-staging]
    if: always()
    steps:
      - name: Final summary
        run: |
          CHANGED="${{ needs.detect-changes.outputs.changed }}"
          BUILD_RESULT="${{ needs.build-test.result }}"
          DEPLOY_RESULT="${{ needs.deploy-staging.result }}"

          echo "Summary:"
          echo "  - Build & Test: $BUILD_RESULT"
          echo "  - Deploy (Staging): $DEPLOY_RESULT"

          if [ -z "$CHANGED" ]; then
            echo "No frontend changes detected — nothing executed."
            exit 0
          fi

          if [ "$BUILD_RESULT" != "success" ] || \
             ([ "$DEPLOY_RESULT" != "success" ] && [ "$DEPLOY_RESULT" != "skipped" ]); then
            echo "One or more jobs failed."
            exit 1
          fi

          echo "All frontend CI/CD jobs passed successfully."