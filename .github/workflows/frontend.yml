name: Frontend CI/CD

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "¿Forzar despliegue?"
        required: true
        type: choice
        options:
          - "No"
          - "Sí"
        default: "Sí"
  push:
    branches: [main, develop]
    paths:
      - "frontend/**"
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect frontend changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.detect.outputs.CHANGED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: detect
        name: Detect changes in frontend
        run: |
          echo "GitHub event: $GITHUB_EVENT_NAME"
          BASE_REF="${{ github.event.pull_request.base.ref || github.ref }}"
          git fetch origin $BASE_REF --depth=1 || true
          CHANGED=$(git diff --name-only origin/$BASE_REF HEAD | grep '^frontend/' || true)
          if [ -z "$CHANGED" ]; then
            echo "No frontend changes detected"
            DETECTED=""
          else
            echo "Frontend changes detected"
            DETECTED="frontend/"
          fi
          echo "CHANGED=$DETECTED" >> $GITHUB_OUTPUT

  build-test:
    name: Lint, Test & Build Angular App
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed != ''
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run unit tests with coverage
        env:
          CI: true
        run: |
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Build Angular app
        run: npm run build --if-present

      - name: List build output (debug)
        run: ls -R dist/frontend/browser

  deploy-staging:
    name: Deploy to Firebase (Staging)
    runs-on: ubuntu-latest
    needs: build-test
    if: >
      github.ref == 'refs/heads/develop' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'Sí') ||
      (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop')
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Confirm build folder exists
        run: |
          if [ ! -d "dist/frontend/browser" ]; then
            echo "Error: dist/frontend/browser does not exist. Build failed?"
            exit 1
          fi

      - name: Deploy to Firebase Staging
        run: firebase deploy --project ${{ vars.FIREBASE_PROJECT_STAGING }} --token ${{ secrets.FIREBASE_TOKEN }} --only hosting

      - name: Health check
        run: |
          echo "Waiting for Firebase to update..."
          sleep 15
          if [ -z "${{ vars.FIREBASE_STAGING_URL }}" ]; then
            echo "No health check URL configured"
          else
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.FIREBASE_STAGING_URL }})
            if [ "$STATUS" != "200" ]; then
              echo "Firebase site not healthy (status: $STATUS)"
              exit 1
            fi
            echo "Firebase site is live and healthy (status: $STATUS)"
          fi

  frontend-status:
    name: Frontend CI/CD Status
    runs-on: ubuntu-latest
    needs: [detect-changes, build-test, deploy-staging]
    if: always()
    steps:
      - name: Final summary
        run: |
          CHANGED="${{ needs.detect-changes.outputs.changed }}"
          BUILD_RESULT="${{ needs.build-test.result }}"
          DEPLOY_RESULT="${{ needs.deploy-staging.result }}"

          echo "Summary:"
          echo "  - Build & Test: $BUILD_RESULT"
          echo "  - Deploy (Staging): $DEPLOY_RESULT"

          if [ -z "$CHANGED" ]; then
            echo "No frontend changes detected — nothing executed."
            exit 0
          fi

          if [ "$BUILD_RESULT" != "success" ] || \
             ([ "$DEPLOY_RESULT" != "success" ] && [ "$DEPLOY_RESULT" != "skipped" ]); then
            echo "One or more jobs failed."
            exit 1
          fi

          echo "All frontend CI/CD jobs passed successfully."