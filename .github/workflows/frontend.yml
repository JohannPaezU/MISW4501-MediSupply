name: Frontend CI/CD

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "¿Forzar despliegue?"
        required: true
        type: choice
        options:
          - "No"
          - "Sí"
        default: "Sí"
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [main, develop]

jobs:
  detect-changes:
    name: Detect frontend changes
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.detect.outputs.CHANGED }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: detect
        name: Detect changes in frontend
        run: |
          if [ -z "${{ github.base_ref }}" ]; then
            echo "🔍 No PR context, assuming frontend changes (manual or push)"
            echo "CHANGED=frontend/" >> $GITHUB_OUTPUT
          else
            echo "Fetching base branch..."
            git fetch origin ${{ github.base_ref }} --depth=1
            echo "Detecting changes in frontend..."
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '^frontend/' || true)
            DETECTED="frontend/"

            if [ -z "$CHANGED" ]; then
              echo "Result: No frontend changes detected"
              DETECTED=""
            else
              echo "Result: Frontend changes detected"
            fi
            echo "CHANGED=$DETECTED" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build & Lint & Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed != ''
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless
        env:
          CI: true

      - name: Build Angular app
        run: npm run build --if-present

  deploy-staging:
    name: Simulate deploy (staging)
    runs-on: ubuntu-latest
    needs: build
    if: >
      github.ref == 'refs/heads/develop' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'Sí') ||
        (github.event_name == 'push' && needs.detect-changes.outputs.changed != '')
      )
    steps:
      - name: Notify simulated deploy
        run: |
          echo "Simulated staging deploy"
          echo "Build successful — skipping real deploy (no hosting configured yet)."

  deploy-prod:
    name: Deploy to production (Not implemented)
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: >
      github.ref == 'refs/heads/main' &&
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == 'Sí') ||
        (github.event_name == 'push' && needs.detect-changes.outputs.changed != '')
      )
    steps:
      - name: Notify production deploy
        run: |
          echo "Deploy to production: Not implemented yet."

  frontend-status:
    name: Frontend CI/CD Status
    runs-on: ubuntu-latest
    needs: [detect-changes, build, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Summary
        run: |
          CHANGED="${{ needs.detect-changes.outputs.changed }}"
          BUILD_RESULT="${{ needs.build.result }}"
          DEPLOY_STAGING_RESULT="${{ needs.deploy-staging.result }}"
          DEPLOY_PROD_RESULT="${{ needs.deploy-prod.result }}"

          echo "Summary:"
          echo "  - Build: $BUILD_RESULT"
          echo "  - Deploy (staging): $DEPLOY_STAGING_RESULT"
          echo "  - Deploy (production): $DEPLOY_PROD_RESULT"

          if [ -z "$CHANGED" ]; then
            echo "No frontend changes detected — nothing executed."
            exit 0
          fi

          if [ "$BUILD_RESULT" != "success" ] || \
             ([ "$DEPLOY_STAGING_RESULT" != "success" ] && [ "$DEPLOY_STAGING_RESULT" != "skipped" ]) || \
             ([ "$DEPLOY_PROD_RESULT" != "success" ] && [ "$DEPLOY_PROD_RESULT" != "skipped" ]); then
            echo "One or more jobs failed."
            exit 1
          fi

          echo "All CI/CD frontend jobs passed successfully."